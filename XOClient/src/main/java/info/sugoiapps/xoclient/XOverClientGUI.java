/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package info.sugoiapps.xoclient;

import java.io.OutputStreamWriter;
import java.awt.event.InputEvent;
import java.net.SocketException;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.io.BufferedWriter;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.JFrame;
import java.net.Socket;

/**
 * @author Daniel Munkacsi
 */

public class XOverClientGUI extends javax.swing.JFrame { //implements MouseMotionListener
    
    private static final String EXIT_MESSAGE = "XOServer is offline!\nThe client will exit after you press OK.";
    private static final String MOUSE_RELEASED = "RELEASE";
    private static final String MOUSE_PRESSED = "PRESS";
    private static final String NEWLINE = "\r\n";
    private static OutputStream outputstream;
    private static OutputStreamWriter osw;
    private static final int PORT = 25000;
    private static BufferedWriter bw;
    private static Socket socket;
    private static int button;
    private final String IP ; // external IP is 92.13.84.14 ||| internal IP is 192.168.1.12 for the laptop
    
    private static InputStream inputstream;
    
    /**
     * Creates new form ClientGUI and start the client.
     * @param adrs  IP address to connect to, should be in the form xxx.xxx.xxx.xxx (IPv4)
     * @param madrs the client machine's internal IP, sent to the file client on the remote device
     */
    public XOverClientGUI(String adrs,String madrs)  {
        IP = adrs;
        button = 0;
        try {
            socket = new Socket(IP,PORT);
            socket.setKeepAlive(true);
            outputstream = socket.getOutputStream();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        osw = new OutputStreamWriter(outputstream);
        bw = new BufferedWriter(osw);
        try {
            bw.write(madrs + NEWLINE);
            bw.flush();
        } catch (IOException ex) {
            Logger.getLogger(XOverClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(XOverClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(XOverClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(XOverClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(XOverClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mouseArea = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(1920, 1080));
        setUndecorated(true);

        mouseArea.setMaximumSize(new java.awt.Dimension(1920, 1080));
        mouseArea.setMinimumSize(new java.awt.Dimension(1920, 1080));
        mouseArea.setOpaque(false);
        mouseArea.setPreferredSize(new java.awt.Dimension(1920, 1080));
        //jPanel1.addMouseMotionListener(this);
        mouseArea.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mouseAreaMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mouseAreaMouseMoved(evt);
            }
        });
        mouseArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mouseAreaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mouseAreaMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout mouseAreaLayout = new javax.swing.GroupLayout(mouseArea);
        mouseArea.setLayout(mouseAreaLayout);
        mouseAreaLayout.setHorizontalGroup(
            mouseAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1920, Short.MAX_VALUE)
        );
        mouseAreaLayout.setVerticalGroup(
            mouseAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1080, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mouseArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mouseArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mouseAreaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseAreaMousePressed
        if(evt.getButton() == 1) button = InputEvent.BUTTON1_MASK; else if(evt.getButton() == 3) button = InputEvent.BUTTON3_MASK;
        
        try {
            bw.write(evt.getX() + " " + evt.getY() + " " + MOUSE_PRESSED + " " + button + NEWLINE);
            bw.flush();
        } catch (IOException ex) {
            serverClosedMessage(ex);
        }
    }//GEN-LAST:event_mouseAreaMousePressed

    private void mouseAreaMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseAreaMouseMoved
        try {
            bw.write(evt.getX() + " " + evt.getY() + NEWLINE);
            bw.flush();
        } catch (IOException ex) {
            serverClosedMessage(ex);
        }
    }//GEN-LAST:event_mouseAreaMouseMoved

    private void mouseAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseAreaMouseReleased
        if(evt.getButton() == 1) button = InputEvent.BUTTON1_MASK; else if(evt.getButton() == 3) button = InputEvent.BUTTON3_MASK;
        
        try {
            bw.write(evt.getX() + " " + evt.getY() + " " + MOUSE_RELEASED + " " + button + NEWLINE);
            bw.flush();
        } catch (IOException ex) {
            serverClosedMessage(ex);
        }
    }//GEN-LAST:event_mouseAreaMouseReleased

    private void mouseAreaMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseAreaMouseDragged
        try {
            bw.write(evt.getX() + " " + evt.getY() + NEWLINE);
            bw.flush();
        } catch (IOException ex) {
            serverClosedMessage(ex);
        }
    }//GEN-LAST:event_mouseAreaMouseDragged

    /**
     * Inform the user that the server has been stopped and the client will close.
     * @param ex the potential SocketException to handle
     */
    private void serverClosedMessage(IOException ex){
        if(ex instanceof SocketException){
            JOptionPane.showMessageDialog(null,EXIT_MESSAGE);
            System.exit(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mouseArea;
    // End of variables declaration//GEN-END:variables

}
